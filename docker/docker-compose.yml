version: '3'
# 配置文件参考：
# https://blog.csdn.net/RtxTitanV/article/details/106927920
services:
  nginx:
    container_name: nginx
    image: nginx:1.13
    privileged: true
    restart: always
    networks:
      webapp:
        ipv4_address: 172.16.238.10
    ports:
      - 80:80
      - 443:443
    volumes:
#      - ./nginx/conf/keys:/etc/nginx/keys
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/www:/usr/share/nginx/html
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - ssm
  es:
    container_name: es
    image: elasticsearch:6.4.3
    environment:
      - cluster.name=deltaqin
      - node.name=node0
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - bootstrap.memory_lock=true
      - transport.host=0.0.0.0
      - transport.tcp.port=9300
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - network.host=0.0.0.0
      - "discovery.type=single-node" #单节点启动
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./es/data:/opt/elasticsearch/data
      - ./es/plugins:/usr/share/elasticsearch/plugins
      - ./es/elasticsearch.yml:/opt/elasticsearch/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      webapp:
        ipv4_address: 172.16.238.9
  rmqnamesrv:
    image: foxiswho/rocketmq:server
    container_name: rmqnamesrv
    ports:
      - 9876:9876
    volumes:
      - ./rocketmq/data/logs:/opt/logs
      - ./rocketmq/data/store:/opt/store
    networks:
      webapp:
        ipv4_address: 172.16.238.8
        aliases:
          - rmqnamesrv

    rmqbroker:
      image: foxiswho/rocketmq:broker
      container_name: rmqbroker
      ports:
        - 10909:10909
        - 10911:10911
      volumes:
        - ./rocketmq/data/logs:/opt/logs
        - ./rocketmq/data/store:/opt/store
        - ./rocketmq/data/brokerconf/broker.conf:/etc/rocketmq/broker.conf
      environment:
        NAMESRV_ADDR: "rmqnamesrv:9876"
        JAVA_OPTS: " -Duser.home=/opt"
        JAVA_OPT_EXT: "-server -Xms128m -Xmx128m -Xmn128m"
      command: mqbroker -c /etc/rocketmq/broker.conf
      depends_on:
        - rmqnamesrv
      networks:
        webapp:
          ipv4_address: 172.16.238.7
          aliases:
            - rmqbroker
    rmqconsole:
      image: styletang/rocketmq-console-ng
      container_name: rmqconsole
      ports:
        - 8080:8080
      environment:
        JAVA_OPTS: "-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
      depends_on:
        - rmqnamesrv
      networks:
        webapp:
          ipv4_address: 172.16.238.20
          aliases:
            - rmqconsole
#  zookeeper:
#    container_name: zookeeper
#    image: wurstmeister/zookeeper
#    ports:
#      - "2181:2181"
#    restart: always
#    networks:
#      webapp:
#        ipv4_address: 172.16.238.8
#  kafka:
#    container_name: kafka
#    image: wurstmeister/kafka:2.12-2.3.0
#    ports:
#      - "9092:9092"
#    environment:
#      - KAFKA_HEAP_OPTS="-Xmx256M -Xms128M"
#      - KAFKA_BROKER_ID=1
#      - KAFKA_auto_create_topics_enable=true
#      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.211.55.66:9092
#      - KAFKA_LISTENERS=PLAINTEXT://:9092
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    restart: always
#    depends_on:
#      - zookeeper
#    networks:
#      webapp:
#        ipv4_address: 172.16.238.7

  cache:
    container_name: redis
    image: redis:5.0
    privileged: true
    restart: always
    ports:
      - 6379:6379
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/data:/data:rw
    #    command可以覆盖容器启动后默认执行的命令。这里启动执行指定的redis.conf文件
    command:
      /bin/bash -c "redis-server /usr/local/etc/redis/redis.conf "
    networks:
      webapp:
        ipv4_address: 172.16.238.6
#  mysql:
#    container_name: mysql
#    image: mysql/mysql-server:5.7
#    privileged: true
#    environment:
#      MYSQL_DATABASE: scu_integrated_platform_SSM
#      MYSQL_ROOT_PASSWORD: 000000
#      MYSQL_ROOT_HOST: '%'
#    ports:
#      - "3306:3306"
#    volumes:
#      - data:/var/lixiub/mysql
#      - ./mysql/config/my.cnf:/etc/my.cnf
#      #   默认情况下它们会初始化在启动容器时声明的 MYSQL_DATABASE变量定义的数据库中
#      - ./mysql/init:/docker-entrypoint-initdb.d/
#    restart: always
#    networks:
#      webapp:
#        ipv4_address: 172.16.238.5
  mysql:
    container_name: mysql
    image: mysql/mysql-server:5.7
    environment:
      MYSQL_DATABASE: scu_integrated_platform_SSM
      MYSQL_ROOT_PASSWORD: hellodeltaqin
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    restart: always
    volumes:
      - data:/var/lixiub/mysql
      - ./mysql/config/my.cnf:/etc/my.cnf
      #   默认情况下它们会初始化在启动容器时声明的 MYSQL_DATABASE变量定义的数据库中
      - ./mysql/init:/docker-entrypoint-initdb.d/
    networks:
      webapp:
        ipv4_address: 172.16.238.5
#        重新部署的时候记得删除data下面的数据，坑爹的一批
  mongodb:
    image: mongo:3.5
    container_name: mongodb
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=commentdb
      - MONGO_INITDB_ROOT_USERNAME=deltaqin
      - MONGO_INITDB_ROOT_PASSWORD=deltaqinPASSWORD
    ports:
      - "27017:27017"
    volumes:
      - ./mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - ./mongo/data:/data/db
    networks:
      webapp:
        ipv4_address: 172.16.238.4
  ssm:
    container_name: scu-ssm             # 容器名为' scu-ssm'
    restart: always                     # 重启策略: 容器退出时总是重启容器
    build:
      context: ./                       # 指定设定上下文根目录，然后以该目录为准指定Dockerfile
      dockerfile: ./Dockerfile
    networks:
      webapp:
        ipv4_address: 172.16.238.3
    environment:
      TZ: Asia/Shanghai
    working_dir: /app
    volumes:                            # 挂载文件
      - ../:/app                 # 将主机的code-api文件夹(java代码)映射到容器内的app文件夹
      - ./ssm-logs/:/app/log                # 映射容器产生的日志到主机的logs文件夹
      - ~/.m2:/root/.m2
    ports:                              # 映射端口
      - "8080:8080"
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=prod -Dspring-boot.run.jvmArguments="-Xms128m -Xmx128m" '-Dmaven.test.skip=true' # 容器创建后执行命令运行springboot项目
    depends_on:
      - cache
      - mysql
      - es
      - kafka
      - mongodb

# 外部数据卷
volumes:
  data:
    driver: local
networks:
  webapp:
    ipam:
      driver: default
      config:
        - subnet: 172.16.0.0/16
          gateway: 172.16.0.1
